import asyncio
import re
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from collections import defaultdict
import logging

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot Token - Environment variable ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable not found!")
    raise ValueError("BOT_TOKEN is required")

# Authorized User IDs (‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ user IDs ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßã)
AUTHORIZED_USERS = [
    123456789,  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ user ID
    987654321,  # ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡¶Ø‡¶º user ID (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
]

# Group ID ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá bot ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
WORKING_GROUP_ID = -1003147912587  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ group ID

# Bot ‡¶è‡¶¨‡¶Ç Dispatcher Initialize
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Video processing queue tracker
processing_queue = defaultdict(list)
is_processing = defaultdict(bool)

# Logging function
def log(message, important=False):
    """Terminal ‡¶è timestamp ‡¶∏‡¶π log ‡¶ï‡¶∞‡¶æ"""
    if important:
        logger.info(message)

# Caption Modification Function
def modify_caption(original_caption):
    """Caption modify ‡¶ï‡¶∞‡¶æ‡¶∞ main function"""
    if not original_caption:
        return None
    
    extension_match = re.search(r'(\.\w+)$', original_caption)
    extension = extension_match.group(1) if extension_match else '.mp4'
    
    caption_without_ext = original_caption.replace(extension, '')
    
    # Step 1: ZEE5 specific pattern remove
    caption_without_ext = re.sub(r'\.Bn\.mp4a\.\d+kbps\.', '.', caption_without_ext, flags=re.IGNORECASE)
    caption_without_ext = re.sub(r'\.mp4a\.\d+kbps\.', '.', caption_without_ext, flags=re.IGNORECASE)
    caption_without_ext = re.sub(r'\.Bna\.\d+kbps\.', '.', caption_without_ext, flags=re.IGNORECASE)
    
    # Step 2: Platform names ‡¶è‡¶¨‡¶Ç technical details remove
    patterns_to_remove = [
        r'\.(JioHotstar|DSNP|SUNNXT|ZEE5)\.',
        r'\.WEB-DL\.',
        r'\.(Bengali|Tamil|Bn)\.',
        r'\.AAC\.\d+\.\d+\.',
        r'\.x264\.',
    ]
    
    for pattern in patterns_to_remove:
        caption_without_ext = re.sub(pattern, '.', caption_without_ext, flags=re.IGNORECASE)
    
    # Step 3: Uploader name replace
    parts = caption_without_ext.split('.')
    if len(parts) > 0 and parts[-1]:
        parts[-1] = '@SBRipssbot'
    
    modified = '.'.join(parts)
    modified = re.sub(r'\.+', ' ', modified)
    modified = re.sub(r'\s+', ' ', modified).strip()
    modified = modified + extension
    
    final_caption = f"<b>{modified}</b>"
    
    return final_caption

# Authorization Check
def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS

# Check if from working group
def is_from_working_group(message: Message):
    if message.chat.type in ['group', 'supergroup']:
        return message.chat.id == WORKING_GROUP_ID
    return False

# /start Command Handler
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    
    if not is_authorized(user_id):
        await message.reply(
            f"‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á bot ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø authorized ‡¶®‡¶ì‡•§\n\n"
            f"Your User ID: {user_id}"
        )
        return
    
    welcome_message = (
        "üé¨ <b>Video Caption Modifier Bot</b>\n\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø automatic caption modification bot‡•§ "
        "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã video ‡¶è‡¶∞ caption modify ‡¶ï‡¶∞‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡•§\n\n"
        "<b>‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá:</b>\n"
        "1Ô∏è‚É£ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá caption ‡¶∏‡¶π video ‡¶™‡¶æ‡¶†‡¶æ‡¶ì (Private chat)\n"
        "2Ô∏è‚É£ ‡¶Ö‡¶•‡¶¨‡¶æ Private Group ‡¶è video post/forward ‡¶ï‡¶∞‡ßã\n"
        "3Ô∏è‚É£ ‡¶Ü‡¶Æ‡¶ø automatically caption modify ‡¶ï‡¶∞‡¶¨\n\n"
        "üìù <b>Note:</b> Video download/upload ‡¶π‡¶¨‡ßá ‡¶®‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ caption change ‡¶π‡¶¨‡ßá‡•§\n\n"
        "‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø authorized user!\n\n"
        "üéØ <b>Features:</b>\n"
        "‚Ä¢ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï video ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá process ‡¶π‡¶¨‡ßá\n"
        "‚Ä¢ Caption automatically bold ‡¶π‡¶¨‡ßá\n"
        "‚Ä¢ ‡¶∏‡¶¨ platform support ‡¶ï‡¶∞‡ßá (ZEE5, JioHotstar, SUNNXT)\n"
        "‚Ä¢ Private group ‡¶è‡¶ì ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá\n"
        "‚Ä¢ Forward ‡¶ï‡¶∞‡¶æ video ‡¶ì handle ‡¶ï‡¶∞‡ßá\n\n"
        "<b>Commands:</b>\n"
        "/test - Group access test ‡¶ï‡¶∞‡ßã"
    )
    
    await message.reply(welcome_message, parse_mode=ParseMode.HTML)

# /test Command
@dp.message(Command("test"))
async def test_group_access(message: Message):
    user_id = message.from_user.id
    
    if not is_authorized(user_id):
        await message.reply("‚ùå Unauthorized")
        return
    
    try:
        test_msg = await bot.send_message(
            chat_id=WORKING_GROUP_ID,
            text="üß™ <b>Bot Test Message</b>\n\n‚úÖ Bot group ‡¶è access ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç message ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡ßá!",
            parse_mode=ParseMode.HTML
        )
        
        response = (
            "‚úÖ <b>Group Access Test Successful!</b>\n\n"
            f"üë• Group ID: <code>{WORKING_GROUP_ID}</code>\n"
            f"üì® Test Message ID: <code>{test_msg.message_id}</code>\n"
            f"‚úÖ Bot successfully posted to the group!\n\n"
            "‡¶è‡¶ñ‡¶® group ‡¶è video post/forward ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßã ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ‡•§"
        )
        
        await message.reply(response, parse_mode=ParseMode.HTML)
        
        await asyncio.sleep(2)
        await bot.delete_message(WORKING_GROUP_ID, test_msg.message_id)
        
    except Exception as e:
        error_response = (
            "‚ùå <b>Group Access Test Failed!</b>\n\n"
            f"üë• Group ID: <code>{WORKING_GROUP_ID}</code>\n"
            f"‚ùå Error: <code>{str(e)}</code>\n\n"
            "<b>Possible issues:</b>\n"
            "1. Bot group ‡¶è add ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á\n"
            "2. Bot admin ‡¶®‡¶æ\n"
            "3. Group ID ‡¶≠‡ßÅ‡¶≤ ‡¶Ü‡¶õ‡ßá\n"
            "4. Bot ‡¶è‡¶∞ Privacy Mode off ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á\n\n"
            "<b>Solution:</b>\n"
            "‚Ä¢ Bot ‡¶ï‡ßá group ‡¶è admin ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì\n"
            "‚Ä¢ @BotFather ‡¶•‡ßá‡¶ï‡ßá Privacy Mode off ‡¶ï‡¶∞‡ßã\n"
            "‚Ä¢ Group ID ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ check ‡¶ï‡¶∞‡ßã"
        )
        await message.reply(error_response, parse_mode=ParseMode.HTML)

# Group Video Handler
@dp.message(F.video, F.chat.type.in_(['group', 'supergroup']))
async def handle_group_video(message: Message):
    if not is_from_working_group(message):
        return
    
    try:
        original_caption = message.caption
        
        if not original_caption:
            return
        
        modified_caption = modify_caption(original_caption)
        file_id = message.video.file_id
        
        await bot.send_video(
            chat_id=message.chat.id,
            video=file_id,
            caption=modified_caption,
            parse_mode=ParseMode.HTML,
            supports_streaming=True
        )
        
    except Exception as e:
        log(f"‚ùå Group video error: {str(e)}", important=True)

# Private Chat Video Handler
@dp.message(F.video, F.chat.type == 'private')
async def handle_private_video(message: Message):
    user_id = message.from_user.id
    
    if not is_authorized(user_id):
        await message.reply(
            f"‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á bot ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø authorized ‡¶®‡¶ì‡•§\n\n"
            f"Your User ID: {user_id}"
        )
        return
    
    processing_queue[user_id].append(message)
    
    if not is_processing[user_id]:
        await process_video_queue(user_id)

async def process_video_queue(user_id):
    is_processing[user_id] = True
    
    while processing_queue[user_id]:
        message = processing_queue[user_id][0]
        
        try:
            original_caption = message.caption
            
            if not original_caption:
                await message.reply("‚ö†Ô∏è Video ‡¶§‡ßá caption ‡¶®‡ßá‡¶á! Caption ‡¶∏‡¶π video ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
                processing_queue[user_id].pop(0)
                continue
            
            processing_msg = await message.reply("‚è≥ Caption modify ‡¶ï‡¶∞‡¶õ‡¶ø...")
            
            modified_caption = modify_caption(original_caption)
            file_id = message.video.file_id
            
            await bot.send_video(
                chat_id=message.chat.id,
                video=file_id,
                caption=modified_caption,
                parse_mode=ParseMode.HTML,
                supports_streaming=True
            )
            
            try:
                await bot.delete_message(message.chat.id, processing_msg.message_id)
            except:
                pass
            
            await message.reply("‚úÖ Caption successfully modified!")
            
            processing_queue[user_id].pop(0)
            await asyncio.sleep(0.5)
            
        except Exception as e:
            await message.reply(f"‚ùå Error: {str(e)}")
            processing_queue[user_id].pop(0)
            await asyncio.sleep(0.5)
    
    is_processing[user_id] = False
    
    if not processing_queue[user_id]:
        del processing_queue[user_id]
        del is_processing[user_id]

# Other Messages Handler
@dp.message()
async def handle_other_messages(message: Message):
    if message.chat.type in ['group', 'supergroup']:
        return
    
    user_id = message.from_user.id
    
    if not is_authorized(user_id):
        await message.reply(
            f"‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á bot ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø authorized ‡¶®‡¶ì‡•§\n\n"
            f"Your User ID: {user_id}"
        )
    else:
        await message.reply(
            "‚ö†Ô∏è ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá caption ‡¶∏‡¶π video ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§\n"
            "‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã message ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§"
        )

# Main Function
async def main():
    log("ü§ñ Bot Starting...", important=True)
    
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        log(f"‚ùå Bot crashed: {str(e)}", important=True)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log("üõë Bot stopped", important=True)
